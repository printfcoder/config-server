// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: config/config.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Config service

type ConfigService interface {
	CreateApp(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	ListApps(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	GetApp(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateCluster(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	GetCluster(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	ListClusters(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateEnv(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	GetEnv(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	ListEnvs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateInstance(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateNamespace(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateItem(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	UpdateItem(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	DeleteItems(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "config"
	}
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) CreateApp(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateApp", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ListApps(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.ListApps", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) GetApp(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.GetApp", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateCluster(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateCluster", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) GetCluster(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.GetCluster", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ListClusters(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.ListClusters", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateEnv(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateEnv", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) GetEnv(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.GetEnv", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ListEnvs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.ListEnvs", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateInstance(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateInstance", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateNamespace(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateNamespace", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateItem(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.CreateItem", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) UpdateItem(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.UpdateItem", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteItems(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Config.DeleteItems", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigHandler interface {
	CreateApp(context.Context, *ConfigRequest, *ConfigResponse) error
	ListApps(context.Context, *ConfigRequest, *ConfigResponse) error
	GetApp(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateCluster(context.Context, *ConfigRequest, *ConfigResponse) error
	GetCluster(context.Context, *ConfigRequest, *ConfigResponse) error
	ListClusters(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateEnv(context.Context, *ConfigRequest, *ConfigResponse) error
	GetEnv(context.Context, *ConfigRequest, *ConfigResponse) error
	ListEnvs(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateInstance(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateNamespace(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateItem(context.Context, *ConfigRequest, *ConfigResponse) error
	UpdateItem(context.Context, *ConfigRequest, *ConfigResponse) error
	DeleteItems(context.Context, *ConfigRequest, *ConfigResponse) error
}

func RegisterConfigHandler(s server.Server, hdlr ConfigHandler, opts ...server.HandlerOption) error {
	type config interface {
		CreateApp(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		ListApps(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		GetApp(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateCluster(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		GetCluster(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		ListClusters(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateEnv(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		GetEnv(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		ListEnvs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateInstance(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateNamespace(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateItem(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		UpdateItem(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		DeleteItems(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
	}
	type Config struct {
		config
	}
	h := &configHandler{hdlr}
	return s.Handle(s.NewHandler(&Config{h}, opts...))
}

type configHandler struct {
	ConfigHandler
}

func (h *configHandler) CreateApp(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateApp(ctx, in, out)
}

func (h *configHandler) ListApps(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.ListApps(ctx, in, out)
}

func (h *configHandler) GetApp(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.GetApp(ctx, in, out)
}

func (h *configHandler) CreateCluster(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateCluster(ctx, in, out)
}

func (h *configHandler) GetCluster(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.GetCluster(ctx, in, out)
}

func (h *configHandler) ListClusters(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.ListClusters(ctx, in, out)
}

func (h *configHandler) CreateEnv(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateEnv(ctx, in, out)
}

func (h *configHandler) GetEnv(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.GetEnv(ctx, in, out)
}

func (h *configHandler) ListEnvs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.ListEnvs(ctx, in, out)
}

func (h *configHandler) CreateInstance(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateInstance(ctx, in, out)
}

func (h *configHandler) CreateNamespace(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateNamespace(ctx, in, out)
}

func (h *configHandler) CreateItem(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.CreateItem(ctx, in, out)
}

func (h *configHandler) UpdateItem(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.UpdateItem(ctx, in, out)
}

func (h *configHandler) DeleteItems(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigHandler.DeleteItems(ctx, in, out)
}
